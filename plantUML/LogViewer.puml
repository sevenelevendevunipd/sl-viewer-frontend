@startuml
interface LogFilteringStrategy {
    +filter(entries: LogParserResponse_4dfe1dd_LogEntry[]): LogParserResponse_4dfe1dd_LogEntry[]
    +reset(): void
}
interface ILogFilteringService {
    +register(filter: LogFilteringStrategy, ui: JSX.Element): void
    +filteredEntries: LogParserResponse_4dfe1dd_LogEntry[]
    +resetAll(): void
    +setLogFile(logFile: LogParserResponse_4dfe1dd_LogFile): void
    +removeFilters(): void
    +filtersUi: JSX.Element
}
class ConcreteLogFilteringService implements ILogFilteringService {
    +registeredFilters: LogFilteringStrategy[]
    +filterUIs: JSX.Element[]
    +logFile: LogParserResponse_4dfe1dd_LogFile | null
    +register(filter: LogFilteringStrategy, ui: JSX.Element): void
    +filteredEntries: LogParserResponse_4dfe1dd_LogEntry[]
    +setLogFile(logFile: LogParserResponse_4dfe1dd_LogFile): void
    +removeFilters(): void
    +resetAll(): void
    +filtersUi: JSX.Element
}
class CodeFilteringStrategy implements LogFilteringStrategy {
    +filterableCodes: string[]
    +selectedCodes: string[]
    +filterSet: Set<string>
    +filter(entries: LogParserResponse_4dfe1dd_LogEntry[]): LogParserResponse_4dfe1dd_LogEntry[]
    +reset(): void
    +selectAll(): void
    +selectNone(): void
    +setSelection(selection: string[]): void
}
class SubunitFilteringStrategy implements LogFilteringStrategy {
    +subunitTree: TreeNode[]
    +selectedSubunits: TreeCheckboxSelectionKeys
    +filterSet: Set<number>
    +filter(entries: LogParserResponse_4dfe1dd_LogEntry[]): LogParserResponse_4dfe1dd_LogEntry[]
    +reset(): void
    +selectAll(): void
    +selectNone(): void
}
interface TimelineProps {
    +logEntries: LogParserResponse_4dfe1dd_LogEntry[]
}
interface Rect {
    +x: number
    +y: number
    +width: number
    +height: number
}
interface LogViewerProps {
    +log: LogParserResponse_4dfe1dd_LogFile
}
@enduml
